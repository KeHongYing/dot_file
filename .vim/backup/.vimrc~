set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'Valloric/YouCompleteMe'
"Plugin 'zxqfl/tabnine-vim'
Plugin 'rdnetto/YCM-Generator'
Plugin 'octol/vim-cpp-enhanced-highlight'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'skielbasa/vim-material-monokai'
Plugin 'Valloric/vim-operator-highlight'
Plugin 'vim-scripts/vim-auto-save'
" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
" Setting some decent VIM settings for programming
""highlight Pmenu ctermfg=White ctermbg=Magenta

let g:ycm_confirm_extra_conf = 0
let g:ycm_global_ycm_extra_conf = "$HOME/.ycm_extra_conf.py"
let g:ycm_python_interpreter_path = '/f'
let g:ycm_python_sys_path = []
let g:ycm_extra_conf_vim_data = [
  \  'g:ycm_python_interpreter_path',
  \  'g:ycm_python_sys_path'
  \]
let g:ycm_semantic_triggers =  {
			\ 'c,cpp,python,java,go,erlang,perl': ['re!\w{2}'],
			\ 'cs,lua,javascript': ['re!\w{2}'],
			\ }
let g:ycm_filetype_whitelist = {"c":1, "cpp":1, "python":1, "vimrc":1, "bashrc":1, "sh":1, "php":1}

let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_concepts_highlight = 1
let g:cpp_experimental_simple_template_highlight = 1

let g:ophigh_color_gui ="#fc3488"
let g:auto_save = 1

set t_Co=256
set termguicolors
set tabstop=4
set smartindent
set shiftwidth=4
set number relativenumber
colorscheme material-monokai
set hlsearch
set noexpandtab

"za: fold/unfold lines, zM: fold all, zR: unfold all
set foldenable
set foldmethod=syntax
"search for the selected text
vnoremap // y/\V<C-r>=escape(@",'/\')<CR><CR>N
inoremap <C-d> <Esc>:q<CR>
vnoremap <C-d> <Esc>:q<CR>
nnoremap <C-d> :q<CR>
"move one word in insert mode
inoremap <C-l> <C-o>w
inoremap <C-h> <C-o>b

let e = expand("%:e")
if (e == "c" || e == "cpp")
	inoremap # #include <><LEFT>
endif

"map <F5> <ESC>:w<CR>:!gcc -o %< -g -Wall -std=c99 %<CR>:!./%<<CR>
"----------------------------my settings are above this line---------------------------------------
" If no screen, use color term
if ($TERM == "vt100")
  " xterm-color / screen
  set t_Co=8
  set t_AF=[1;3%p1%dm
  set t_AB=[4%p1%dm
endif

if filereadable($VIMRUNTIME . "/vimrc_example.vim")
 so $VIMRUNTIME/vimrc_example.vim
endif

if filereadable($VIMRUNTIME . "/macros/matchit.vim")
 so $VIMRUNTIME/macros/matchit.vim
endif

syntax on

set nocompatible
set wildmenu
set backupdir=~/.vim/backup,~/tmp,.,/var/tmp/vi.recover,/tmp
set directory=~/.vim/swap,~/tmp,/var/tmp/vi.recover,/tmp,.
set undodir=~/tmp,~/.vim/undo,/tmp,.
set backup		" keep a backup file
" set textwidth=78
" set shiftwidth=4
set bs=2		" allow backspacing over everything in insert mode
set ai			" always set autoindenting on
set viminfo='20,\"50	" read/write a .viminfo file, don't store more
set showmatch

"set background=dark	" another is 'light'

" VIM 6.0,
if version >= 600
    set foldmethod=marker
    set foldlevel=1
    set fileencodings=ucs-bom,utf-8,sjis,big5,latin1
else
    set fileencoding=taiwan
endif

" Tab key binding
if version >= 700
  map  <C-c> :tabnew<CR>
  imap <C-c> <ESC>:tabnew<CR>
  map <F4> :set invcursorline<CR>

  map g1 :tabn 1<CR>
  map g2 :tabn 2<CR>
  map g3 :tabn 3<CR>
  map g4 :tabn 4<CR>
  map g5 :tabn 5<CR>
  map g6 :tabn 6<CR>
  map g7 :tabn 7<CR>
  map g8 :tabn 8<CR>
  au TabLeave * let g:lasttab = tabpagenr()
  map g9 :tabn 9<CR>

  highlight TabLineSel term=bold,underline cterm=bold,underline ctermfg=7 ctermbg=0
  highlight TabLine    term=bold cterm=bold
  highlight clear TabLineFill


end

" Crontabs must be edited in place
au BufRead /tmp/crontab* :set backupcopy=yes

inoremap <F7> <Esc>:w<CR>:!make<CR>
nnoremap <F7> <Esc>:w<CR>:!make<CR>
inoremap <F6> <Esc>:w<CR>:!make %<<CR>
nnoremap <F6> <Esc>:w<CR>:!make %<<CR>
command! COMPILE call s:COMPILE()
nnoremap <F5> <ESC>:w<CR>:COMPILE<CR>
inoremap <F5> <ESC>:w<CR>:COMPILE<CR>
nnoremap <F2> <ESC>:set tabstop=4<CR>:set noexpandtab<CR>:%retab!<CR>
function! s:COMPILE()
	let e = expand("%:e")
	if e == "c"
		:call s:Gcc()
	endif
	if e == "py"
		:call s:Python()
	endif
	if e == "cpp"
		:call s:Cpp()
	endif
	if e == "sh"
		:call s:Shell()
	endif
endfunction

function! s:Python()
	:silent !echo -e "\n\e[32;1mpython3 "%"\e[0m"
	:!python3 %
endfunction

function! s:Gcc()
	:!gcc % -o %< -g -Wall -Wextra && ./%<
endfunction

function! s:Cpp()
	:!g++ % -o %< -g -Wall -Wextra -std=c++17 && ./%<
endfunction

function! s:Shell()
	:silent !echo -e "\n\e[32;1mbash "%"\e[0m"
	:!bash %
endfunction

set mouse=a
hi Normal guibg=#1a2226
hi Comment guifg=#20c100
highlight Pmenusel guifg=#00a2e8 guibg=#eeeeee
vnoremap // y/\V<C-r>=escape(@",'/\')<CR><CR>N

inoremap start #include <stdio.h><CR>#include <stdlib.h><CR>#include <string.h><CR>#pragma GCC optimized ("unroll-loops")<CR>#pragma GCC optimized ("O3")<CR><CR>int main()<CR>{<CR>return 0;<CR><Esc>i}
inoremap compare int compare(const void *a, const void *b)<CR>{<CR>return *(int *)a - *(int *)b;<CR><Esc>i}
inoremap bubble for(int i = 0; i < len - 1; i ++){<CR>  for(int j = 0; j < len - 1 - i; j ++){<CR><CR>}<CR><Esc>i       }
inoremap KMP pi[0] = -1;<CR>k = -1;<CR>for(int i = 1; i < M_len; i ++){<CR>     while(k > -1 && M[k + 1] != M[i])<CR>   k = pi[k];<CR><Esc>i    if(M[k + 1] == M[i])<CR>        k ++;<CR><Esc>i      pi[i] = k;<CR><Esc>i}<CR><CR>k = -1;<CR>for(int i = 0; i < N_len; i ++){<CR>    while(k > -1 && M[k + 1] != N[i])<CR>   k = pi[k];<CR><Esc>i    if(M[k + 1] == N[i])<CR>        k ++;<CR><Esc>i      if(k == M_len - 1) //find<CR>   k = pi[k];<CR><Esc>i}
inoremap gcd int gcd(int a, int b)<CR>{<CR>if(a < b){<CR>int temp = a;<CR>a = b;<CR>b = temp;<CR><Esc>i }<CR>if(a % b == 0)<CR>return b;<CR>else<CR>return gcd(a % b, b);<CR><ESC>i}
inoremap finput int hasEOF = 0;<CR>int readchar(){<CR>static int N = 1 << 20;<CR>static char buf[1<<20];<CR>static char *p = buf, *end = buf;<CR>if(p == end){<CR>if((end = buf + fread(buf, 1, N, stdin)) == buf){<CR>hasEOF = 1;<CR>return EOF;<CR>}<CR>p = buf;<CR>}<CR>return *p++;<CR>}<CR>int ReadInt(int *x){<CR>char c, neg;<CR>while((c = readchar()) < '-')<CR>if(c == EOF)<CR>return 0;<CR>neg = (c == '-') ? -1 : 1;<CR>*x = (neg == 1) ? c-'0' : 0;<CR>while((c = readchar()) >= '0')<CR>*x = (*x << 3) + (*x << 1) + c-'0';<CR>*x *= neg;<CR>return 1;<CR>}<CR>//int x; while(ReadInt(&x)){code}
